#+TITLE: Doom Emacs Literate Config
#+AUTHOR: Sridhar D Kedlaya
#+DATE:  [24-04-2023]
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t

* Doom Emacs Config
It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the dark side. This is his config.

*Doom Emacs* is a configuration framework for GNU Emacs and the stubborn martian hacker. This is my personal Doom Emacs configuration
[[./assets/config.png]]
[[./assets/Dashboard.png]]
* Name and Email Address
This is my name and email address. Used everywhere including git commits made by magit.
#+BEGIN_SRC elisp
(setq user-full-name "Sridhar D Kedlaya"
      user-mail-address "sridhar@sridharkedlaya.xyz")
#+END_SRC
* Window Manager Mutual Exclusion
Changing the meta key from alt to right super to make keybindings mutually exclusive.
#+BEGIN_SRC elisp
(setq  x-meta-keysym 'super
       x-super-keysym 'meta)
#+END_SRC
* To be or not to be
Bind "kj" to go into normal mode from evil-insert mode.
#+BEGIN_SRC elisp
(setq key-chord-two-keys-delay 0.5)
(key-chord-define evil-insert-state-map "kj" 'evil-normal-state)
(key-chord-mode 1)
#+END_SRC
* Doom Theme
Setting the theme to doom-sourcerer
#+BEGIN_SRC elisp
(setq doom-theme 'doom-sourcerer)
#+END_SRC
* Custom Dashboard
** Splash Image
*** Image
#+BEGIN_SRC elisp
(defvar fancy-splash-image-directory
  (expand-file-name "~/.config/doom/misc/splash-images/" doom-private-dir)
  "Directory in which to look for splash image templates.")

(defvar fancy-splash-image-template
  (expand-file-name "blackhole-template.svg" fancy-splash-image-directory)
  "Default template svg used for the splash image.
   Colours are substituted as per `fancy-splash-template-colours'.")
#+END_SRC
*** Colors
Color plists
#+BEGIN_SRC elisp
(defvar fancy-splash-template-colours
  '(("#111112" :face default   :attr :foreground)
    ("#8b8c8d" :face shadow)
    ("#eeeeef" :face default   :attr :background)
    ("#e66100" :face highlight :attr :background)
    ("#1c71d8" :face font-lock-keyword-face)
    ("#f5c211" :face font-lock-type-face)
    ("#813d9c" :face font-lock-constant-face)
    ("#865e3c" :face font-lock-function-name-face)
    ("#2ec27e" :face font-lock-string-face)
    ("#c01c28" :face error)
    ("#000001" :face ansi-color-black)
    ("#ff0000" :face ansi-color-red)
    ("#ff00ff" :face ansi-color-magenta)
    ("#00ff00" :face ansi-color-green)
    ("#ffff00" :face ansi-color-yellow)
    ("#0000ff" :face ansi-color-blue)
    ("#00ffff" :face ansi-color-cyan)
    ("#fffffe" :face ansi-color-white))
  "A list of colour-replacement plists. Each plist is of the form (\"$placeholder\" :doom-color 'key :face 'face).
    If the current theme is a doom theme :doom-color will be used,
    otherwise the colour will be face foreground.")
#+END_SRC
Checking for unrecognized hex strings
#+BEGIN_SRC elisp
(defun fancy-splash-check-buffer ()
  "Check the current SVG buffer for bad colours."
  (interactive)
  (when (eq major-mode 'image-mode)
    (xml-mode))
  (when (and (featurep 'rainbow-mode)
             (not (bound-and-true-p rainbow-mode)))
    (rainbow-mode 1))
  (let* ((colours (mapcar #'car fancy-splash-template-colours))
         (colourise-hex
          (lambda (hex)
            (propertize
             hex
             'face `((:foreground
                      ,(if (< 0.5
                              (cl-destructuring-bind (r g b) (x-color-values hex)
                                ;; Values taken from `rainbow-color-luminance'
                                (/ (+ (* .2126 r) (* .7152 g) (* .0722 b))
                                   (* 256 255 1.0))))
                           "white" "black")
                      (:background ,hex))))))
         (cn 96)
         (colour-menu-entries
          (mapcar
           (lambda (colour)
             (cl-incf cn)
             (cons cn
                   (cons
                    (substring-no-properties colour)
                    (format " (%s) %s %s"
                            (propertize (char-to-string cn)
                                        'face 'font-lock-keyword-face)
                            (funcall colourise-hex colour)
                            (propertize
                             (symbol-name
                              (plist-get
                               (cdr (assoc colour fancy-splash-template-colours))
                               :face))
                             'face 'shadow)))))
           colours))
         (colour-menu-template
          (format "Colour %%s is unexpected! Should this be one of the following?\n %s %s to ignore %s to quit"
                  (mapconcat
                   #'cddr
                   colour-menu-entries
                   "\n")
                  (propertize "SPC" 'face 'font-lock-keyword-face)
                  (propertize "ESC" 'face 'font-lock-keyword-face)))
         (colour-menu-choice-keys
          (append (mapcar #'car colour-menu-entries)
                  (list ?\s)))
         (buf (get-buffer-create "*fancy-splash-lint-colours-popup*"))
         (good-colour-p
          (lambda (colour)
            (or (assoc colour fancy-splash-template-colours)
                ;; Check if greyscale
                (or (and (= (length colour) 4)
                         (= (aref colour 1)   ; r
                            (aref colour 2)   ; g
                            (aref colour 3))) ; b
                    (and (= (length colour) 7)
                         (string= (substring colour 1 3)       ; rr =
                                  (substring colour 3 5))      ; gg
                         (string= (substring colour 3 5)       ; gg =
                                  (substring colour 5 7))))))) ; bb
         (prompt-to-replace
          (lambda (target)
            (with-current-buffer buf
              (erase-buffer)
              (insert (format colour-menu-template
                              (funcall colourise-hex target)))
              (setq-local cursor-type nil)
              (set-buffer-modified-p nil)
              (goto-char (point-min)))
            (save-window-excursion
              (pop-to-buffer buf)
              (fit-window-to-buffer (get-buffer-window buf))
              (car (alist-get
                    (read-char-choice
                     (format "Select replacement, %s-%s or SPC: "
                             (char-to-string (caar colour-menu-entries))
                             (char-to-string (caar (last colour-menu-entries))))
                     colour-menu-choice-keys)
                    colour-menu-entries))))))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "#[0-9A-Fa-f]\\{6\\}\\|#[0-9A-Fa-f]\\{3\\}" nil t)
        (recenter)
        (let* ((colour (match-string 0))
               (replacement (and (not (funcall good-colour-p colour))
                                 (funcall prompt-to-replace colour))))
          (when replacement
            (replace-match replacement t t))))
      (message "Done"))))
#+END_SRC
*** Cache Directory
#+BEGIN_SRC elisp
(defvar fancy-splash-cache-dir (expand-file-name "theme-splashes/" doom-cache-dir))
#+END_SRC
*** Resizing
Dynamic resizing
#+BEGIN_SRC elisp
(defvar fancy-splash-sizes
  `((:height 300 :min-height 42 :padding (0 . 2))
    (:height 250 :min-height 35 :padding (2 . 4))
    (:height 200 :min-height 28 :padding (3 . 3))
    (:height 150 :min-height 20 :padding (3 . 3))
    (:height 100 :min-height 15 :padding (2 . 2))
    (:height 75  :min-height 10 :padding (2 . 1))
    (:height 50  :min-height 0 :padding (1 . 0))
    (:height 1   :min-height 0  :padding (0 . 0)))
  "List of plists specifying image sizing states.
    Each plist should have the following properties:
    - :height, the height of the image
    - :min-height, the minimum `frame-height' for image
    - :padding, a `+doom-dashboard-banner-padding' (top . bottom) padding specification to apply
    Optionally, each plist may set the following two properties:
    - :template, a non-default template file
    - :file, a file to use instead of template")
#+END_SRC
*** Working
**** File path
#+BEGIN_SRC elisp
(defun fancy-splash-filename (theme template height)
  "Get the file name for the splash image with THEME and of HEIGHT."
  (expand-file-name (format "%s-%s-%d.svg" theme (file-name-base template) height) fancy-splash-cache-dir))
#+END_SRC
**** Generating Images
#+BEGIN_SRC elisp
(defun fancy-splash-generate-image (template height)
  "Create a themed image from TEMPLATE of HEIGHT.
The theming is performed using `fancy-splash-template-colours'
and the current theme."
  (with-temp-buffer
    (insert-file-contents template)
    (goto-char (point-min))
    (if (re-search-forward "$height" nil t)
        (replace-match (number-to-string height) t t)
      (if (re-search-forward "height=\"100\\(?:\\.0[0-9]*\\)?\"" nil t)
          (progn
            (replace-match (format "height=\"%s\"" height) t t)
            (goto-char (point-min))
            (when (re-search-forward "\\([ \t\n]\\)width=\"[\\.0-9]+\"[ \t\n]*" nil t)
              (replace-match "\\1")))
        (warn "Warning! fancy splash template: neither $height nor height=100 not found in %s" template)))
    (dolist (substitution fancy-splash-template-colours)
      (goto-char (point-min))
      (let* ((replacement-colour
              (face-attribute (plist-get (cdr substitution) :face)
                              (or (plist-get (cdr substitution) :attr) :foreground)
                              nil 'default))
             (replacement-hex
              (if (string-prefix-p "#" replacement-colour)
                  replacement-colour
                (apply 'format "#%02x%02x%02x"
                       (mapcar (lambda (c) (ash c -8))
                               (color-values replacement-colour))))))
        (while (search-forward (car substitution) nil t)
          (replace-match replacement-hex nil nil))))
    (unless (file-exists-p fancy-splash-cache-dir)
      (make-directory fancy-splash-cache-dir t))
    (let ((inhibit-message t))
      (write-region nil nil (fancy-splash-filename (car custom-enabled-themes) template height)))))
#+END_SRC

#+BEGIN_SRC elisp
(defun fancy-splash-generate-all-images ()
  "Perform `fancy-splash-generate-image' in bulk."
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image
       (or (plist-get size :template)
           fancy-splash-image-template)
       (plist-get size :height)))))
#+END_SRC
**** (unless image-exists create-images)
#+BEGIN_SRC elisp
(defun fancy-splash-ensure-theme-images-exist (&optional height)
  "Ensure that the relevant images exist.
Use the image of HEIGHT to check, defaulting to the height of the first
specification in `fancy-splash-sizes'. If that file does not exist for
the current theme, `fancy-splash-generate-all-images' is called. "
  (unless (file-exists-p
           (fancy-splash-filename
            (car custom-enabled-themes)
            fancy-splash-image-template
            (or height (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-all-images)))
#+END_SRC
**** (clear-cache)
#+BEGIN_SRC elisp
(defun fancy-splash-clear-cache (&optional delete-files)
  "Clear all cached fancy splash images.
Optionally delete all cache files and regenerate the currently relevant set."
  (interactive (list t))
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (let ((image-file
             (fancy-splash-filename
              (car custom-enabled-themes)
              (or (plist-get size :template)
                  fancy-splash-image-template)
              (plist-get size :height))))
        (image-flush (create-image image-file) t))))
  (message "Fancy splash image cache cleared!")
  (when delete-files
    (delete-directory fancy-splash-cache-dir t)
    (fancy-splash-generate-all-images)
    (message "Fancy splash images cache deleted!")))
#+END_SRC
**** (switch-template)
#+BEGIN_SRC elisp
(defun fancy-splash-switch-template ()
  "Switch the template used for the fancy splash image."
  (interactive)
  (let ((new (completing-read
              "Splash template: "
              (mapcar
               (lambda (template)
                 (replace-regexp-in-string "-template\\.svg$" "" template))
               (directory-files fancy-splash-image-directory nil "-template\\.svg\\'"))
              nil t)))
    (setq fancy-splash-image-template
          (expand-file-name (concat new "-template.svg") fancy-splash-image-directory))
    (fancy-splash-clear-cache)
    (message "") ; Clear message from `fancy-splash-clear-cache'.
    (setq fancy-splash--last-size nil)
    (fancy-splash-apply-appropriate-image)))
#+END_SRC
**** Getting appropriate image
#+BEGIN_SRC elisp
(defun fancy-splash-get-appropriate-size ()
  "Find the first `fancy-splash-sizes' with min-height of at least frame height."
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= (* 0.5 height) (plist-get size :min-height)) size))
             fancy-splash-sizes)))
#+END_SRC

#+BEGIN_SRC elisp
(setq fancy-splash--last-size nil)
(setq fancy-splash--last-theme nil)

(defun fancy-splash-apply-appropriate-image (&rest _)
  "Ensure the appropriate splash image is applied to the dashboard.
This function's signature is \"&rest _\" to allow it to be used
in hooks that call functions with arguments."
  (let ((appropriate-size (fancy-splash-get-appropriate-size)))
    (unless (and (equal appropriate-size fancy-splash--last-size))
      (unless (plist-get appropriate-size :file)
        (fancy-splash-ensure-theme-images-exist (plist-get appropriate-size :height)))
      (setq fancy-splash-image
            (or (plist-get appropriate-size :file)
                (fancy-splash-filename (car custom-enabled-themes)
                                       fancy-splash-image-template
                                       (plist-get appropriate-size :height)))
            +doom-dashboard-banner-padding (plist-get appropriate-size :padding)
            fancy-splash--last-size appropriate-size)
      (+doom-dashboard-reload))))
#+END_SRC
** ASCII Banner
#+BEGIN_SRC elisp
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
  (let* ((banner
          '("    _____   _     _   _        _                  "
            "   |  _  | | |   | |(_)      (_)                  "
            "  | |  || | |__ | | _ __   __ _   ___   _ __      "
            " | |  || | '_ \\| || |\\ \\ / /| | / _ \\ | '_ \\ "
            " | \\_// | |_)|| || | \\ V / | || (_) || | | |    "
            " \\___/ |_.__/|_||_|  \\_/  |_| \\___/ |_| |_|    "))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))
#+END_SRC
#+BEGIN_SRC elisp
(unless (display-graphic-p) ; for some reason this messes up the graphical splash screen atm
  (setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn))
#+END_SRC
** Splash Phrases
** Integration from 0 to inf
*** Benchmark line
#+BEGIN_SRC elisp
(defun +doom-dashboard-benchmark-line ()
  "Insert the load time line."
  (when doom-init-time
    (insert
     "\n\n"
     (propertize
      (+doom-dashboard--center
       +doom-dashboard--width
       (doom-display-benchmark-h 'return))
      'face 'doom-dashboard-loaded))))
#+END_SRC

#+BEGIN_SRC elisp
(remove-hook 'doom-after-init-hook #'doom-display-benchmark-h)
#+END_SRC
*** Dashboard Functions
#+BEGIN_SRC elisp
(setq +doom-dashboard-functions
      (list #'doom-dashboard-widget-banner
            #'+doom-dashboard-benchmark-line))
;; #'splash-phrase-dashboard-insert))
#+END_SRC

#+BEGIN_SRC elisp
(defun +doom-dashboard-tweak (&optional _)
  (with-current-buffer (get-buffer +doom-dashboard-name)
    (setq-local line-spacing 0.2
                mode-line-format nil
                evil-normal-state-cursor (list nil))))
#+END_SRC
*** Dashboard Hook
#+BEGIN_SRC elisp
(add-hook '+doom-dashboard-mode-hook #'+doom-dashboard-tweak)
#+END_SRC

#+BEGIN_SRC elisp
(add-hook 'doom-after-init-hook #'+doom-dashboard-tweak 1)
#+END_SRC
*** Renaming the dashboard name
#+BEGIN_SRC elisp
(setq +doom-dashboard-name "Oblivion"
      doom-fallback-buffer-name +doom-dashboard-name)
#+END_SRC
*** Dynamic resizing
#+BEGIN_SRC elisp
(add-hook 'window-size-change-functions #'fancy-splash-apply-appropriate-image)
(add-hook 'doom-load-theme-hook #'fancy-splash-apply-appropriate-image)
#+END_SRC
* Fonts
Settings related to fonts within Doom Emacs.
#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "Monaspace Krypton" :size 15)
      doom-variable-pitch-font (font-spec :family "Monaspace Krypton" :size 15)
      doom-big-font (font-spec :family "Monaspace Krypton" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC
* Line Settings
Line Settings for my Doom emacs
#+BEGIN_SRC elisp
(setq display-line-numbers-type 'relative)
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers"            "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines"          "t" #'toggle-truncate-lines))
#+END_SRC
* Dire Circumstances
Dired is the file manager within Emacs.
** Keybindings within Dired
#+BEGIN_SRC elisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
              (:map dired-mode-map
               :desc "Peep-dired image previews" "d p" #'peep-dired
               :desc "Dired view file"           "d v" #'dired-view-file)))

(setq peep-dired-cleanup-on-disable t)

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)

(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
(setq dired-open-extensions '(("gif" . "viewnior")
                              ("jpg" . "viewnior")
                              ("png" . "viewnior")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+END_SRC
** Keybindings within Dired with Peep-Dired-Mode Enabled
#+BEGIN_SRC elisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC
** Making deleted files go to trash can
#+BEGIN_SRC elisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
#+END_SRC

* Hookers
Making spell check and recent files work in daemon mode.
#+BEGIN_SRC elisp
(add-hook 'find-file-hook 'recentf-save-list)
(add-hook 'find-file-hook 'flyspell-mode)
#+END_SRC
* Teleport
*Teleport*!!
#+BEGIN_SRC elisp
(map! :leader
      (:prefix ("=" . "open file")
       :desc "Edit agenda file"      "a" #'(lambda () (interactive) (find-file "~/Documents/org/agenda.org"))
       :desc "Edit doom config.org"  "c" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
       :desc "Edit doom init.el"     "i" #'(lambda () (interactive) (find-file "~/.config/doom/init.el"))
       :desc "Edit doom packages.el" "p" #'(lambda () (interactive) (find-file "~/.config/doom/packages.el"))))
#+END_SRC
* The search engine of the future
Vertico cofig
#+BEGIN_SRC elisp
(use-package! vertico
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
#+END_SRC
* Transpose-Frame
Window-Management in Emacs? Window-Management in Emacs
#+BEGIN_SRC elisp
(use-package! transpose-frame)
#+END_SRC
* Veni, Vedi, Vici
Org Mode is one of the hallmark features of Emacs. One text format to conquer them all
** Nicer Heading Bullets
#+BEGIN_SRC elisp
(after! org
  (setq org-ellipsis " ▼ ")
  (setq org-superstar-headline-bullets-list '("◉  " "●  " "○  " "◆  " "●  " "○  " "◆  "))
  (setq org-superstar-itembullet-alist '((?+ . ?✦) (?- . ?➤)))
  (setq org-log-done 'time)
  (setq org-hide-emphasis-markers t)
  (setq org-link-abbrev-alist
        '(("google" . "http://www.google.com/search?q=")
          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/")))
  (setq org-table-convert-region-max-lines 20000)
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "Note(n)"
           "BLOG(b)"
           "|"
           "DONE(d)")
          (sequence
           "BACKLOG(b)"
           "PLAN(p)"
           "READY(r)"
           "ACITVE(a)"
           "REVIEW(v)"
           "WAIT(w@/!)"
           "HOLD(h)"
           "|"
           "COMPLETED(c)"
           "CANCELLED(k@)"
           )))) ; Task has been cancelled
#+END_SRC
** Better Font Faces
#+BEGIN_SRC elisp
(defun sk/org-font-setup ()
  (with-eval-after-load 'org-faces
    (dolist (face
             '((org-level-1 1.7 "#78dce8" ultra-bold)
               (org-level-2 1.6 "#ab9df2" extra-bold)
               (org-level-3 1.5 "#a9dc76" bold)
               (org-level-4 1.4 "#fc9867" semi-bold)
               (org-level-5 1.3 "#ff6188" normal)
               (org-level-6 1.2 "#ffd866" normal)
               (org-level-7 1.1 "#78dce8" normal)
               (org-level-8 1.0 "#ab9df2" normal)))
      (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf")))
(sk/org-font-setup)
#+END_SRC
** Org Agenda
*/Non moror faciens agendi/*
#+BEGIN_SRC elisp
(use-package! org
  :commands (org-agenda)
  :config
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-files '("~/Documents/org/agenda.org"
                           "~/Documents/org/Birthday.org")))
#+END_SRC
Tags pro win
#+BEGIN_SRC elisp
(setq org-tag-alist
      '((:startgroup)
                                        ; Put mutually exclusive tags here
        (:endgroup)
        ("@errand" . ?E)
        ("@home" . ?H)
        ("@work" . ?W)
        ("agenda" . ?a)
        ("planning" . ?p)
        ("publish" . ?P)
        ("batch" . ?b)
        ("note" . ?n)
        ("idea" . ?i)
        ("thinking" . ?t)
        ("recurring" . ?r)))
#+END_SRC
Sed tamen hoc mirabile est
#+BEGIN_SRC elisp
(setq org-agenda-custom-commands
      '(("d" "Dashboard"
         ((agenda "" ((org-deadline-warning-days 7)))
          (todo "BLOG"
                ((org-agenda-overriding-header "Blog Stuff")))
          (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

        ("b" "Blog Stuff"
         ((todo "BLOG"
                ((org-agenda-overriding-header "Blog Stuff")))))

        ("e" "Low effort tasks"
         ((tags-todo "+TODO=\"TODO\"+Effort<15&+Effort>0"
                     ((org-agenda-overriding-header "Low Effort Tasks")
                      (org-agenda-max-todos 20)
                      (org-agenda-files org-agenda-files)))))

        ("w" "Workflow Status"
         ((todo "WAIT"
                ((org-agenda-overriding-header "Waiting on External")
                 (org-agenda-files org-agenda-files)))
          (todo "REVIEW"
                ((org-agenda-overriding-header "In Review")
                 (org-agenda-files org-agenda-files)))
          (todo "PLAN"
                ((org-agenda-overriding-header "In Planning")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
          (todo "BACKLOG"
                ((org-agenda-overriding-header "Project Backlog")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
          (todo "READY"
                ((org-agenda-overriding-header "Ready for Work")
                 (org-agenda-files org-agenda-files)))
          (todo "ACTIVE"
                ((org-agenda-overriding-header "Active Projects")
                 (org-agenda-files org-agenda-files)))
          (todo "COMPLETED"
                ((org-agenda-overriding-header "Completed Projects")
                 (org-agenda-files org-agenda-files)))
          (todo "CANCELLED"
                ((org-agenda-overriding-header "Cancelled Projects")
                 (org-agenda-files org-agenda-files)))))))
#+END_SRC
Archiving automatice
#+BEGIN_SRC elisp
(setq org-refile-targets
      '(("archive.org" :maxlevel . 1)
        ("agenda.org" :maxlevel . 1)))

(advice-add 'org-refile :after 'org-save-all-org-buffers)
#+END_SRC
*** Org capture
Capture notes as never before with capture templates.
#+BEGIN_SRC elisp
(use-package! org
  :commands (org-capture)
  :config
  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/Documents/org/agenda.org" "in the flow")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

          ("w" "Workflows")
          ("we" "Checking Email" entry (file+olp+datetree "~/Documents/org/agenda.org" "inbox")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line (file+headline "~/Documents/org/metrics.org" "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t))))

(define-key global-map (kbd "C-c t")
  (lambda () (interactive) (org-capture nil "tt")))
#+END_SRC
** Second Brain? Second Brain
#+BEGIN_SRC elisp
(defun sk/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(use-package! org-roam
  :custom
  (org-roam-directory "~/Documents/emacs/orgRoam")
  (setq org-roam-completion-everywhere t)
  :bind ( :map org-mode-map (
                             "C-M-i" . completion-at-point ;; Trigger Completion at point
                             ))
                                        ;:hook (org-roam-mode . org-roam-ui-mode)
  :config
  (org-roam-db-autosync-enable)
  :custom
  (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (sk/org-roam-node-insert-immediate))


(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(map! :leader
      (:prefix-map ("r" . "roam")
       :desc "Org roam Buffer toggle"  "t" #'org-roam-buffer-toggle
       :desc "Org roam node find"  "f" #'org-roam-node-find
       :desc "Show graph"  "g" #'org-roam-mode-ui
       :desc "Capture to node"  "g" #'org-roam-capture
       :desc "Org roam node insert"  "i" #'org-roam-node-insert
       :desc "Org roam node insert immediate"  "I" #'sk/org-roam-node-insert-immediate
       :desc "Org roam heading id create"  "h" #'org-id-get-create))
#+END_SRC
*** Capture
Capture templates for roam.
#+BEGIN_SRC elisp
(use-package! org-roam
  :custom
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)
     ("w" "word" plain
      "* Definition\n%?\n* Example\n1. "
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: word\n")
      :unnarrowed t)
     ("p" "project" plain "* Goals\n%?\n* Tasks\n** TODO Add initial tasks\n\n*Index\n\n* Dates\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: project")
      :unnarrowed t))))
#+END_SRC

#+RESULTS:
: org-roam

** Org-babel-tangle
#+BEGIN_SRC elisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(defun sk/insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+auto_tangle: t ")
  (evil-force-normal-state))

(map! :leader
      :desc "Insert auto_tangle tag" "i a" #'sk/insert-auto-tangle-tag)
#+END_SRC
* Trusted Document Format
[[./assets/trust.png]]
The config files for the trusted document format.
#+BEGIN_SRC elisp

#+END_SRC
* Elegant Weapons for a more civilized age
Repl everywhere.
#+BEGIN_SRC elisp
(map! :leader
      (:prefix ("e". "evaluate")
       :desc "Evaluate elisp in buffer"  "b" #'eval-buffer
       :desc "Evaluate defun"            "d" #'eval-defun
       :desc "Evaluate elisp expression" "e" #'eval-expression
       :desc "Evaluate last sexpression" "l" #'eval-last-sexp
       :desc "Evaluate elisp in region"  "r" #'eval-region))
#+END_SRC
** Common Lisp
#+BEGIN_SRC elisp
(setq inferior-lisp-program "sbcl")
#+END_SRC

* ~Sage~ mode
#+BEGIN_SRC elisp
(use-package! sage-shell-mode
  :init
  (setq sage-shell:use-prompt-toolkit nil)
  (setq sage-shell:use-simple-prompt t)
  (setq sage-shell:set-ipython-version-on-startup nil)
  (setq sage-shell:check-ipython-version-on-startup nil)
  (sage-shell:define-alias)
  :hook ((sage-shell-mode-hook sage-shell:sage-mode-hook) . eldoc-mode))
#+END_SRC
** M-x +jupyter-mode+
#+BEGIN_SRC elisp
(setq org-babel-default-header-args:sage '((:session . t)
                                           (:results . "output")))

(with-eval-after-load "org"
  (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

(setq org-confirm-babel-evaluate nil)
(setq org-export-babel-evaluate nil)
(setq org-startup-with-inline-images t)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

* M-x vscode
#+BEGIN_SRC elisp
(use-package! lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :commands (lsp)
  :custom
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  :config
  (lsp-enable-which-key-integration t)
  (setq lsp-eldoc-render-all t))

(use-package! lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc--inline-pos 'bottom))
#+END_SRC
** Typescript Mode
#+BEGIN_SRC elisp
(use-package! typescript-mode
  :mode "\\.ts\\'"
  :config
  (setq typescript-indent-level 4)
  (add-hook 'typescript-mode-hook 'lsp)
  :custom
  (create-lockfiles nil))
#+END_SRC
** C > C++ == 1
#+BEGIN_SRC elisp
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)
#+END_SRC
** Rustic Mode
#+BEGIN_SRC elisp
(use-package rustic
  :bind (:map rustic-mode-map
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'sk/rustic-mode-hook))

(defun sk/rustic-mode-hook ()
  (when buffer-file-name
    (setq-local buffer-save-without-query t))
  (add-hook 'before-save-hook 'lsp-format-buffer nil t))
#+END_SRC
** React Mode
#+BEGIN_SRC elisp
(use-package! rjsx-mode
  :mode "\\.jsx\\'"
  :hook (rjsx-mode . lsp)
  :custom
  (create-lockfiles nil))
#+END_SRC
* Company (Ultimate code completion backend)
#+BEGIN_SRC elisp
(use-package! company
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :custom
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 0.0))
#+END_SRC
* My elves
They type so I don't have to
#+BEGIN_SRC elisp
(after! yasnippet
  (use-package! yasnippet
    :config
    (setq yas-snippet-dirs '("~/Documents/emacs/snippets"))
    (yas-global-mode t)))
#+END_SRC
